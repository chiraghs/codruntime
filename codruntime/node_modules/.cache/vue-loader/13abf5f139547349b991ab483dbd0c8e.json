{"remainingRequest":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Hackhatons\\Code_rit\\fitness\\src\\views\\elder.vue?vue&type=template&id=ea8d1940&","dependencies":[{"path":"D:\\Hackhatons\\Code_rit\\fitness\\src\\views\\elder.vue","mtime":1588527934693},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}