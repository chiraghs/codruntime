{"remainingRequest":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Hackhatons\\Code_rit\\fitness\\src\\views\\vegan.vue?vue&type=template&id=23c3899b&","dependencies":[{"path":"D:\\Hackhatons\\Code_rit\\fitness\\src\\views\\vegan.vue","mtime":1588528004137},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Hackhatons\\Code_rit\\fitness\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgInYtc3RlcHBlciIsCiAgICB7CiAgICAgIGF0dHJzOiB7IHZlcnRpY2FsOiAiIiwgZGFyazogIiIgfSwKICAgICAgbW9kZWw6IHsKICAgICAgICB2YWx1ZTogX3ZtLmU2LAogICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgIF92bS5lNiA9ICQkdgogICAgICAgIH0sCiAgICAgICAgZXhwcmVzc2lvbjogImU2IgogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygKICAgICAgICAidi1zdGVwcGVyLXN0ZXAiLAogICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICIjOEI1RTNDIiwgY29tcGxldGU6IF92bS5lNiA+IDEsIHN0ZXA6ICIxIiB9IH0sCiAgICAgICAgW192bS5fdigiIERheSAxLCBNb25kYXkgIildCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LXN0ZXBwZXItY29udGVudCIsCiAgICAgICAgeyBhdHRyczogeyBzdGVwOiAiMSIsIGNvbG9yOiAiIzhCNUUzQyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItMTIiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiZ3JleSBkYXJrZW4tMSIsIGhlaWdodDogIjIwMHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkJSRUFLRkFTVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogVmFuaWxsYSBjaGlhIHB1ZGRpbmcgd2l0aCAxIGN1cCBmcmVzaCBiZXJyaWVzLiAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiTFVOQ0giKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiBDcnVuY2h5IHJlZCBjYWJiYWdlIGFuZCBncmVlbiBhcHBsZSBzZXNhbWUgc2xhdyB3aXRoIDEgY3VwIHN0ZWFtZWQsIGN1YmVkIHN3ZWV0IHBvdGF0byAob3IgMSBzbWFsbCBzd2VldCBwb3RhdG8sIGJha2VkKSAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJBRlRFUk5PT04gU05BQ0siKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiAxLzQgY3VwIGhlbXAgaHVtbXVzIHdpdGggZnJlc2ggdmVnZXRhYmxlcyAoY2Fycm90cywgY2VsZXJ5LCByb21haW5lIGxlYXZlcywgYmVsbCBwZXBwZXIsIGV0Yy4pICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRJTk5FUiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IEJsYWNrIGJlYW4gYW5kIHF1aW5vYSBzYWxhZCB3aXRoIHF1aWNrIGN1bWluIGRyZXNzaW5nLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRFU1NFUlQiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IERhcmsgY2hvY29sYXRlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWJ0biIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgX3ZtLmU2ID0gMgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ29udGludWUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygidi1idG4iLCB7IGF0dHJzOiB7IHRleHQ6ICIiIH0gfSwgW192bS5fdigiQ2FuY2VsIildKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAidi1zdGVwcGVyLXN0ZXAiLAogICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICIjOEI1RTNDIiwgY29tcGxldGU6IF92bS5lNiA+IDIsIHN0ZXA6ICIyIiB9IH0sCiAgICAgICAgW192bS5fdigiRGF5IDIsIFR1ZXNkYXkiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInYtc3RlcHBlci1jb250ZW50IiwKICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIsIHN0ZXA6ICIyIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNhcmQiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0xMiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJncmV5IGxpZ2h0ZW4tMSIsIGhlaWdodDogIjIwMHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkJSRUFLRkFTVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IFNtb290aGllIHdpdGggMSBjdXAgYWxtb25kIG1pbGssIDEgbGFyZ2UgZnJvemVuIGJhbmFuYS4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiTFVOQ0giKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiAxIGJyb3duIHJpY2UgdG9ydGlsbGEgKEZvb2QgRm9yIExpZmUgYnJhbmQpIG9yIHR3byBnbHV0ZW4gZnJlZSBjb3JuIHRvcnRpbGxhcyB3aXRoIDEvNCBjdXAgaGVtcCBodW1tdXMsIGZyZXNoIG9yIHJvYXN0ZWQgcmVkIGJlbGwgcGVwcGVyLCBzbGljZWQgY3VjdW1iZXJzLCBhbmQgYSBoYW5kZnVsIG9mIGdyZWVucy4gU2VydmUgd2l0aCBzdGVhbWVkIHZlZ2V0YWJsZXMgYXMgZGVzaXJlZCwgb3IgYSBzbWFsbCBzaWRlIHNhbGFkLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJBRlRFUk5PT04gU05BQ0siKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IFByb3RlaW4gYmFyLiIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJESU5ORVIiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiBadWNjaGluaSBQYXN0YSB3aXRoIENoZXJyeSBUb21hdG9lcywgU3dlZXQgUG90YXRvLCBCYXNpbCwgYW5kIEhlbXAg4oCcUGFybWVzYW7igJ0gLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRFU1NFUlQiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IEJhbmFuYSBzb2Z0IHNlcnZlIC4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZTYgPSAzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDb250aW51ZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ2LWJ0biIsIHsgYXR0cnM6IHsgdGV4dDogIiIgfSB9LCBbX3ZtLl92KCJDYW5jZWwiKV0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LXN0ZXBwZXItc3RlcCIsCiAgICAgICAgeyBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiLCBjb21wbGV0ZTogX3ZtLmU2ID4gMywgc3RlcDogIjMiIH0gfSwKICAgICAgICBbX3ZtLl92KCJEYXkgMywgV2VkbmVzZGF5IildCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LXN0ZXBwZXItY29udGVudCIsCiAgICAgICAgeyBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiLCBzdGVwOiAiMyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItMTIiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiZ3JleSBsaWdodGVuLTEiLCBoZWlnaHQ6ICIyMDBweCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJCUkVBS0ZBU1QiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiBRdWlub2EgYnJlYWtmYXN0IHBvcnJpZGdlIHdpdGggMSBjdXAgZnJlc2ggYmVycmllcyAuICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkxVTkNIIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjpMYXJnZSBzYWxhZCB3aXRoIGF0IGxlYXN0IHRocmVlIGN1cHMgb2YgZ3JlZW5zLCB3aGljaGV2ZXIgdmVnZ2llcyB5b3UgbGlrZSwgMyB0YWJsZXNwb29ucyBwdW1wa2luIG9yIGhlbXAgc2VlZHMsIGFuZCBhIGRyZXNzaW5nIG9mIGNob2ljZS4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiQUZURVJOT09OIFNOQUNLIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogNCB0YWJsZXNwb29ucyBoZW1wIGh1bW11cyB3aXRoIGZyZXNoIHZlZ2V0YWJsZXMgKGNhcnJvdHMsIGNlbGVyeSwgcm9tYWluZSBsZWF2ZXMsIGJlbGwgcGVwLXBlciwgZXRjLikgLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRJTk5FUiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IFNtYWxsIGJha2VkIHN3ZWV0IHBvdGF0byAoaW5zdHJ1Y3Rpb25zIGJlbG93KSB3aXRoIGEgdGFibGVzcG9vbiBvZiBtZWx0ZWQgY29jb251dCBvaWwsIGhhbGYgYSBjdXAgb2Ygb3JnYW5pYyBibGFjayBiZWFucywgYW5kIHN0ZWFtZWQgZ3JlZW5zIGFzIGRlc2lyZWQgKG9yIGEgZnJlc2ggc2lkZSBzYWxhZCkuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiREVTU0VSVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogMiByYXcgYnJvd25pZSBiaXRlcy4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZTYgPSA0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDb250aW51ZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ2LWJ0biIsIHsgYXR0cnM6IHsgdGV4dDogIiIgfSB9LCBbX3ZtLl92KCJDYW5jZWwiKV0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LXN0ZXBwZXItc3RlcCIsCiAgICAgICAgeyBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiLCBjb21wbGV0ZTogX3ZtLmU2ID4gNCwgc3RlcDogIjQiIH0gfSwKICAgICAgICBbX3ZtLl92KCJEYXkgNCwgVGh1cnNkYXkiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInYtc3RlcHBlci1jb250ZW50IiwKICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIsIHN0ZXA6ICI0IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNhcmQiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0xMiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJncmV5IGxpZ2h0ZW4tMSIsIGhlaWdodDogIjIwMHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkJSRUFLRkFTVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IFBlYW51dCBCdXR0ZXIgJiBDaG9jb2xhdGUgQ2hpcCBOaXJ2YW5hIGJhciwgZnJlc2ggZnJ1aXQgc2FsYWQgYXMgZGVzaXJlZC4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiTFVOQ0giKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOkdvbGRlbiBoYXJ2ZXN0IGthbGUgc2FsYWQgd2l0aCAxLzIgY3VwIG9yZ2FuaWMgY2hpY2twZWFzLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkFGVEVSTk9PTiBTTkFDSyIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogMSBvei4gYWxtb25kcyBhbmQgYSBmZXcgdGFibGVzcG9vbnMgcmFpc2lucy4iKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiRElOTkVSIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogUXVpY2sgd2hpdGUgYmVhbiBhbmQgc3VtbWVyIHZlZ2V0YWJsZSBwYXN0YSAocHJlcGFyZSB3aXRoIHF1aW5vYSBvciBicm93biByaWNlIHBhc3RhKSAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJERVNTRVJUIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiOiAyIHJhdyB2ZWdhbiB2YW5pbGxhIG1hY2Fyb29ucyAuIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWJ0biIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgX3ZtLmU2ID0gNQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ29udGludWUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygidi1idG4iLCB7IGF0dHJzOiB7IHRleHQ6ICIiIH0gfSwgW192bS5fdigiQ2FuY2VsIildKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAidi1zdGVwcGVyLXN0ZXAiLAogICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICIjOEI1RTNDIiwgY29tcGxldGU6IF92bS5lNiA+IDUsIHN0ZXA6ICI1IiB9IH0sCiAgICAgICAgW192bS5fdigiRGF5IDUsIEZyaWRheSIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAidi1zdGVwcGVyLWNvbnRlbnQiLAogICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICIjOEI1RTNDIiwgc3RlcDogIjUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY2FyZCIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTEyIiwKICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogImdyZXkgbGlnaHRlbi0xIiwgaGVpZ2h0OiAiMjAwcHgiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiQlJFQUtGQVNUIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogU21vb3RoaWUgd2l0aCAxIGN1cCBhbG1vbmQgbWlsaywgMSBjdXAgZnJvemVuIGJsdWViZXJyaWVzLCAxIHNlcnZpbmcgY2hvY29sYXRlIE51dHJpdGlvbiBwcm90ZWluLCAzIHRhYmxlc3Bvb25zIG9mIGhlbXAgc2VlZHMuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiTFVOQ0giKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiBMZWZ0b3ZlciB3aGl0ZSBiZWFuIGFuZCBzdW1tZXIgdmVnZXRhYmxlIHBhc3RhIG9yIGEgbGFyZ2UgZ3JlZW4gc2FsYWQgd2l0aCBoYWxmIGEgY3VwIG9mIGJlYW5zIG9yIGxlbnRpbHMsIHR3byB0YWJsZXNwb29ucyBzbGljZWQgYWxtb25kcywgdmVnZXRhYmxlcyBvZiB5b3VyIGNob29zaW5nLCBhbmQgdHVybWVyaWMgdGFoaW5pIGRyZXNzaW5nIC4iCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJBRlRFUk5PT04gU05BQ0siKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IEFwcGxlIHdpdGggMiB0YWJsZXNwb29ucyBhbG1vbmQgYnV0dGVyIC4iKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiRElOTkVSIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogQnV0dGVybnV0IHNxdWFzaCBjdXJyeSBzZXJ2ZWQgb3ZlciAxLzIgY3VwIGNvb2tlZCBxdWlub2EsIHN0ZWFtZWQgdmVnZXRhYmxlcyBhcyBkZXNpcmVkLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRFU1NFUlQiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IERhcmsgY2hvY29sYXRlIC4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZTYgPSA2CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDb250aW51ZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ2LWJ0biIsIHsgYXR0cnM6IHsgdGV4dDogIiIgfSB9LCBbX3ZtLl92KCJDYW5jZWwiKV0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LXN0ZXBwZXItc3RlcCIsCiAgICAgICAgeyBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiLCBjb21wbGV0ZTogX3ZtLmU2ID4gNiwgc3RlcDogIjQiIH0gfSwKICAgICAgICBbX3ZtLl92KCJEYXkgNiwgU2F0dXJkYXkiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInYtc3RlcHBlci1jb250ZW50IiwKICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIsIHN0ZXA6ICI2IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNhcmQiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0xMiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJncmV5IGxpZ2h0ZW4tMSIsIGhlaWdodDogIjIwMHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkJSRUFLRkFTVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogQmFuYW5hIGFuZCBhbG1vbmQgYnV0dGVyIG9hdHMgLiIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJMVU5DSCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogU21va3kgYXZvY2FkbyBhbmQgamljYW1hIHNhbGFkIC4iKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiQUZURVJOT09OIFNOQUNLIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogMSBjdXAgYWxtb25kIG1pbGsgYmxlbmRlZCB3aXRoIE51dHJpdGlvbiBwcm90ZWluIHBvd2RlciBhbmQgYSBmZXcgaWNlIGN1YmUuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiRElOTkVSIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIjogQmxhY2sgYmVhbiBhbmQgY29ybiBidXJnZXJzLCBzZXJ2ZWQgd2l0aCBhIHNtYWxsIHNhbGFkIG9yIHN0ZWFtZWQgdmVnZXRhYmxlcyAuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyMHB4IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiREVTU0VSVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIjogMiByYXcgdmVnYW4gdmFuaWxsYSBtYWNhcm9vbnMuIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWJ0biIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogIiM4QjVFM0MiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgX3ZtLmU2ID0gNgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQ29udGludWUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygidi1idG4iLCB7IGF0dHJzOiB7IHRleHQ6ICIiIH0gfSwgW192bS5fdigiQ2FuY2VsIildKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygidi1zdGVwcGVyLXN0ZXAiLCB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIsIHN0ZXA6ICI3IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkRheSA3LCBTdW5kYXkiKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgInYtc3RlcHBlci1jb250ZW50IiwKICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIsIHN0ZXA6ICI3IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNhcmQiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0xMiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJncmV5IGxpZ2h0ZW4tMSIsIGhlaWdodDogIjIwMHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkJSRUFLRkFTVCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IFNtb290aGllIG9mIDEvMiBmcm96ZW4gYmFuYW5hLCAxIGN1cCBmcm96ZW4gcGVhY2hlcywgMiBpY2UgY3ViZXMsIDMvNCBjdXAgYWxtb25kIG1pbGssICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkxVTkNIIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiOiBMZWZ0b3ZlciBibGFjayBiZWFuIGFuZCBjb3JuIGJ1cmdlciwgc21hbGwgc2FsYWQgLiIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjIwcHgiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJBRlRFUk5PT04gU05BQ0siKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiOiAxLzQgY3VwIHZlZ2FuIHRyYWlsIG1peCBvZiBjaG9pY2UgKG9yIDIgdGJzcCByYXcgYWxtb25kcyBvciBjYXNoZXdzIGFuZCAyIHRic3AgZHJpZWQgZnJ1aXQpLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRJTk5FUiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICI6IDEgY3VwIGNvb2tlZCBxdWlub2EsIGJyb3duIHJpY2UsIG9yIG1pbGxldCwgc2VydmVkIHdpdGggMS8yIGNob3BwZWQgYXZvY2FkbywgMSBjdXAgc3RlYW1lZCBncmVlbnMgLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMjBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkRFU1NFUlQiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCI6IDEvMiBjdXAgY2hvY29tb2xlIC4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygidi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiIzhCNUUzQyIgfSB9LCBbX3ZtLl92KCJGaW5pc2hlZCIpXSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}